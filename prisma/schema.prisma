generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id           String      @id @default(uuid()) @db.Uuid
  profileId    String      @db.Uuid
  title        String
  latitude     Float
  longitude    Float
  locationText String
  description  String
  category     String      @default("Other")
  imageUrl     String?
  postedOn     DateTime    @default(now())
  Comments     Comment[]
  Dislikes     Dislike[]
  Favourites   Favourite[]
  Likes        Like[]
  creator      Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model InterestRegion {
  profileId  String                   @db.Uuid
  id         String                   @id @default(uuid())
  name       String?
  region     Unsupported("geometry")?
  regionJson Json?
  user       Profile                  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([region], map: "interest_region_temp_idx", type: Gist)
}

model Profile {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  Comments        Comment[]
  Dislikes        Dislike[]
  Favourites      Favourite[]
  InterestRegions InterestRegion[]
  Likes           Like[]
  Posts           Post[]
}

model Like {
  postId    String  @db.Uuid
  profileId String  @db.Uuid
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([postId, profileId])
}

model Dislike {
  postId    String  @db.Uuid
  profileId String  @db.Uuid
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([postId, profileId])
}

model Favourite {
  postId    String  @db.Uuid
  profileId String  @db.Uuid
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([postId, profileId])
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  postId    String   @db.Uuid
  profileId String   @db.Uuid
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Test_InterestRegion {
  id          String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId   String?                  @db.Uuid
  region      Json?
  name        String?                  @db.VarChar
  region_geom Unsupported("geometry")?

  @@index([region_geom], map: "test_interest_region_geom_idx", type: Gist)
}
